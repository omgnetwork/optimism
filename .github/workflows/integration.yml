name: integration

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - '*rc'
      - 'regenesis/*'
  pull_request:
  workflow_dispatch:

jobs:

  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-00b46fa1102c70ff2
          ec2-instance-type: t2.xlarge
          subnet-id: subnet-905870ae
          security-group-id: sg-0855631d714870b32
  
  integration:
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    env:
        DOCKER_BUILDKIT: 1
        COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      # Monorepo tests
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build the services
        working-directory: ./ops
        run: ./scripts/build-ci.sh

      - name: Bring the stack up
        working-directory: ./ops
        run: |
          ./scripts/stats.sh &
          docker-compose -f docker-compose-base.yml up -d

      - name: Wait for the Sequencer node
        working-directory: ./ops
        run: ./scripts/wait-for-sequencer.sh

      - name: Run the integration tests
        working-directory: ./ops
        run: docker-compose run integration_tests

      # Examples Tests
      # - name: Test & deploy hardhat-example on Ethereum (regression)
      #  working-directory: ./examples/hardhat
      #  run: |
      #    yarn
      #    yarn deploy
      #    yarn test:integration

      # - name: Test & deploy hardhat-example on Optimistic Ethereum
      #  working-directory: ./examples/hardhat
      #  run: |
      #    yarn deploy:ovm
      #    yarn test:integration:ovm

      - name: Test & deploy waffle-example on Ethereum (regression)
        working-directory: ./examples/waffle
        run: |
          yarn
          yarn compile
          yarn test:integration

      - name: Test & deploy waffle-example on Optimistic Ethereum
        working-directory: ./examples/waffle
        run: |
          yarn compile:ovm
          yarn test:integration:ovm

      - name: Test & deploy truffle-example on Ethereum (regression)
        working-directory: ./examples/truffle
        run: |
          yarn
          yarn compile
          yarn test:integration
          yarn deploy

      - name: Test & deploy truffle-example on Optimistic Ethereum
        working-directory: ./examples/truffle
        run: |
          yarn compile:ovm
          yarn test:integration:ovm
          yarn deploy:ovm

      # - name: Test l1-l2-deposit-withdrawal example on Optimistic Ethereum with cross-domain message passing
      #   working-directory: ./examples/l1-l2-deposit-withdrawal
      #   run: |
      #     yarn
      #     yarn compile
      #     yarn compile:ovm
      #     yarn test:integration:ovm

      # - name: Collect docker logs on failure
      #   if: failure()
      #   uses: jwalton/gh-docker-logs@v1
      #   with:
      #     images: 'ethereumoptimism/builder,ethereumoptimism/hardhat,ethereumoptimism/deployer,ethereumoptimism/data-transport-layer,ethereumoptimism/l2geth,ethereumoptimism/message-relayer,ethereumoptimism/batch-submitter,ethereumoptimism/l2geth,ethereumoptimism/integration-tests'
      #     dest: '~/logs'

      # - name: Tar logs
      #   if: failure()
      #   run: tar cvzf ./logs.tgz ~/logs

      # - name: Upload logs to GitHub
      #   if: failure()
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: logs.tgz
      #     path: ./logs.tgz

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - integration # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}