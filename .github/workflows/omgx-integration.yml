name: omgx_integration

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - '*rc'
      - 'regenesis/*'
  pull_request:
  workflow_dispatch:

jobs:
  omgx_integration:
    runs-on: integration-tests #ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      TEST_PRIVATE_KEY_1: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
      TEST_PRIVATE_KEY_2: "0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba"
      TEST_PRIVATE_KEY_3: "0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e"
      ADDRESS_MANAGER_ADDRESS: "0x5FbDB2315678afecb367f032d93F642f64180aa3"
      L1_NODE_WEB3_URL: http://localhost:9545
      L2_NODE_WEB3_URL: http://localhost:8545
      URL: http://127.0.0.1:8080/addresses.json
      OMGX_URL: http://127.0.0.1:8078/addresses.json

    steps:
      # Monorepo tests
      - uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install yq
        run: sudo snap install yq

      - name: Check the .envs
        run: printenv

      - name: Build the services, bring the stack up + OMGX services
        working-directory: ./ops
        env:
          BUILD: 1
          DAEMON: 1
        run: ./up_local.sh

      # just sets up background logs for the system that was just started
      - name: Start background logging
        working-directory: ./ops
        run: docker-compose -f docker-compose.yml -f docker-compose-omgx-services.yml logs --follow &
      
      # this test jitters - in any case, later tests will fail if the OMGX_deployer does not come up
      - name: Test serving OMGX contracts
        working-directory: ./
        run: |
          RETRIES=60
          URL=http://127.0.0.1:8078/addresses.json
          until $(curl --silent --fail --output /dev/null "$URL"); do
            sleep 20s
            echo "Will wait $((RETRIES--)) more times for $URL to be up..."

            if [ "$RETRIES" -lt 0 ]; then
              echo "Timeout waiting for contract deployment"
              exit 1
            fi
          done
          echo "OMGX contracts are deployed"
          L2LIQUIDITY_POOL=$(curl --silent $URL | jq -r .L2LiquidityPool)
          echo $L2LIQUIDITY_POOL
          if [[ $L2LIQUIDITY_POOL =~ "0x" ]]; then
            exit 0
          else
            exit 1
          fi

      - name: Test the base OMGX contracts
        working-directory: ./packages/omgx/contracts
        run: |
          yarn test:integration

      # ToDo
      # - name: Test the base OMGX contracts
      #   working-directory: ./ops
      #   run: docker-compose -f docker-compose.yml -f docker-compose-omgx-services.yml run omgx_test_contracts

      - name: Test the message-relayer-fast
        working-directory: ./packages/omgx/message-relayer-fast
        run: |
          yarn test:integration

      # ToDo
      # - name: Test the message-relayer-fast
      #   working-directory: ./ops
      #   run: docker-compose -f docker-compose.yml -f docker-compose-omgx-services.yml run omgx_test_relayer
        
      # - name: List all built images
      #   if: failure()
      #   run: docker images

      # - name: Collect docker logs on failure
      #   if: failure()
      #   uses: jwalton/gh-docker-logs@v1
      #   with:
      #     images: 'omgx/builder,omgx/hardhat,omgx/deployer,omgx/data-transport-layer,omgx/l2geth,omgx/message-relayer,omgx/batch-submitter,omgx/l2geth,omgx/integration-tests,omgx/wallet_builder,omgx/wallet_deployer'
      #     dest: './logs'

      # - name: Tar logs
      #   if: failure()
      #   run: tar cvzf ./logs.tgz ./logs

      # - name: Upload logs to GitHub
      #   if: failure()
      #   uses: actions/upload-artifact@master
      #   with:
      #     name: logs.tgz
      #     path: ./logs.tgz
