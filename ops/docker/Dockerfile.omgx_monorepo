# This Dockerfile builds all the dependencies needed by the monorepo, and should
# be used to build any of the follow-on services
#
# ### BASE: Install deps
# We do not use Alpine because there's a regression causing it to be very slow
# when used with typescript/hardhat: https://github.com/nomiclabs/hardhat/issues/1219
FROM node:14-buster-slim as node
RUN apt-get update -y && apt-get install -y git

# Pre-download the compilers so that they do not need to be downloaded inside
# the image when building
FROM alpine as downloader
ARG VERSION=v0.7.6
ARG SOLC_VERSION=${VERSION}+commit.7338295f
ARG SOLC_UPSTREAM=https://github.com/ethereum/solc-bin/raw/gh-pages/linux-amd64/solc-linux-amd64-${SOLC_VERSION}
ARG OVM_SOLC_UPSTREAM=https://github.com/ethereum-optimism/solc-bin/raw/gh-pages/bin/soljson-${VERSION}.js

ADD $SOLC_UPSTREAM ./solc
ADD $OVM_SOLC_UPSTREAM ./ovm-solc

FROM node as builder
# copy over the needed configs to run the dep installation
# note: this approach can be a bit unhandy to maintain, but it allows
# us to cache the installation steps
WORKDIR /optimism
COPY *.json yarn.lock ./
COPY packages/omgx/wallet/package.json ./packages/omgx/wallet/package.json
COPY integration-tests/package.json ./integration-tests/package.json

RUN yarn install --frozen-lockfile

### BUILDER: Builds the typescript
FROM node

WORKDIR /optimism

COPY --from=builder /optimism/packages/omgx ./packages/omgx
COPY ./packages/omgx ./packages/omgx
# copy over solc to save time building (35+ seconds vs not doing this step)
COPY --from=downloader solc /root/.cache/hardhat-nodejs/compilers/linux-amd64/solc-linux-amd64-v0.7.6+commit.7338295f
COPY --from=downloader ovm-solc /root/.cache/hardhat-nodejs/compilers/ovm/0.7.6.js
WORKDIR /optimism/packages/omgx/wallet
RUN yarn install
RUN yarn build
WORKDIR /optimism
CMD ["true"]
