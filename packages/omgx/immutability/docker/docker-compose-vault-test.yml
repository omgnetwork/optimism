version: "3"
###
### stuff is a bit convoluted here, simply because the process isn't trivial
### To execute Vault tests, that submit stuff to L1 contracts, we need all the addresses (OVM_CTC, OVM_SCC).
### But for these contracts to be deployed, these contracts need Sequencer and Proposer addresses.
### So we start Vault and wait for it to be ready (the grep thingy in entrypoint)
### We continue with wallet, account and policy creation and setup. And write them to a file tokens_and_accounts.sh.
### The deployer mounts this volume and checks for the existence of this file and sources it when it comes up. This
### Exposes Sequencer and Deployer addresses as ENV vars in the deployer node.
### I guess this is OK for local docker-compose, but it certanly won't be OK for production Vault deploy.
### The Vault is a delicate thing.

services:
  ###
  ### deployer and batch_submitter are re-defined here
  ### because we need to override the default env vars
  ### that put in the sequencer and proposer private keys
  ### via SEQUENCER_PRIVATE_KEY - SEQUENCER_ADDRESS, PROPOSER_PRIVATE_KEY - PROPOSER_ADDRESS
  ### not very clean atm, because the modes exist side by side.

  ### we inject a short script that was prepared in Vault.
  ### It exposes Vault tokens, sequencer address and proposer address
  ### as env vars.
  ### PROPOSER_TOKEN, SEQUENCER_TOKEN, SEQUENCER_ADDRESS, PROPOSER_ADDRESS

  ### The deployer takes these addresses and populates the contracts guard with them.
  ### Batch submitter will go into Vault mode if these env vars are present.
  deployer:
    volumes:
      - "./../packages/omgx/immutability/test:/vault/test"
    entrypoint:
      - "/bin/bash"
      - -ec
      - |
       SCRIPT=$$(cat <<-END
       while [ ! -f /vault/test/tokens_and_accounts.sh ]
       do
         sleep 5
         echo "Waiting for the Vault accounts in tokens_and_accounts.sh"
       done
       source /vault/test/tokens_and_accounts.sh
       END
       )
       preprocessed_VAR=$$(printf '%s\n' "$$SCRIPT" | sed 's/\\/&&/g;s/^[[:blank:]]/\\&/;s/$$/\\/')
       sed -i -e "/set -e/a\\$${preprocessed_VAR%?}" deployer.sh
       ./deployer.sh

  batch_submitter:
    volumes:
      - "./../packages/omgx/immutability/test:/vault/test"
    environment:
      VAULT_ADDR: http://vault:8900
    entrypoint:
      - "/bin/bash"
      - -ec
      - |
       SCRIPT=$$(cat <<-END
       while [ ! -f /vault/test/tokens_and_accounts.sh ]
       do
         sleep 5
         echo "Waiting for the Vault accounts in tokens_and_accounts.sh"
       done
       source /vault/test/tokens_and_accounts.sh
       END
       )
       preprocessed_VAR=$$(printf '%s\n' "$$SCRIPT" | sed 's/\\/&&/g;s/^[[:blank:]]/\\&/;s/$$/\\/')
       sed -i -e "/set -e/a\\$${preprocessed_VAR%?}" batches.sh
       ./batches.sh

  vault:
    image: omgx/vault
    ports:
      - "127.0.0.1:8200:8200"
    build:
      context: ..
      dockerfile: ./ops/docker/Dockerfile.omgx_vault
    user: root
    deploy:
       replicas: 1
    environment:
      VAULT_ADDR: http://127.0.0.1:8900
      VAULT_CACERT: /vault/config/ca.crt
      RUN_TEST: "${RUN_TEST:-false}"
      TEST: "${TEST:-false}"
      URL: http://deployer:8081/addresses.json
    volumes:
      - "/tmp/vault_auth:/vault/config:rw"
      - "./../packages/omgx/immutability/test:/vault/test"
      - "./vault/data/immutability/config:/vault/config:rw"
    entrypoint:
      - "/bin/sh"
      - -ec
      - |
        rm /vault/test/tokens_and_accounts.sh || true
        apk add --quiet --no-progress --update --no-cache make gcc g++
        apk add --quiet --no-progress --update --no-cache python3 && ln -sf python3 /usr/bin/python
        python3 -m ensurepip
        pip3 install --no-cache --upgrade pip setuptools
        apk add --quiet --no-progress --update nodejs npm
        cd /vault/test && npm install
        nohup /vault/vault.sh > /tmp/vault.out &
        while [ $$(cat /tmp/vault.out | grep -c "Success! Enabled the immutability-eth-plugin secrets engine at: immutability-eth-plugin/") -ne 1 ];
        do
            sleep 10
            echo "Waiting for Vault setup to finish..."
        done
        export VAULT_TOKEN=$$(cat /vault/config/unseal.json | jq -r .root_token)
        echo "Config and provisioning, create tokens_and_accounts.sh"
        bash /vault/test/config.sh
        RETRIES=$${RETRIES:-60}
        if [[ ! -z "$$URL" ]]; then
          # get the addrs from the URL provided
          ADDRESSES=$$(curl --fail --show-error --silent --retry-connrefused --retry $$RETRIES --retry-delay 5 $$URL)
          echo $$ADDRESSES
          export OVM_CTC=$$(echo $$ADDRESSES | jq -r '.OVM_CanonicalTransactionChain') && echo $$OVM_CTC
          export OVM_SCC=$$(echo $$ADDRESSES | jq -r '.OVM_StateCommitmentChain') && echo $$OVM_SCC
        fi
        echo "Sourcing tokens and accounts"
        source /vault/test/tokens_and_accounts.sh
         # cleanup
        rm /vault/test/tokens_and_accounts.sh
        echo "Executing tests"
        /vault/test/execute_tests.sh
